type Query {
    fancy(fantasyTeamId: ID!): FancyResult!

    fantasyTeam(id: ID!): FantasyTeam!

    premierLeagueTeams: [PremierLeagueTeam!]!
    premierLeagueTeam(id: ID!): PremierLeagueTeam!
    premierLeaguePlayer(id: ID!): PremierLeaguePlayer!
}

type FancyResult {
    """
    The total point difference the user lost out on by not captaining Salah
    """
    totalPointDifference: Int!

    """
    The number of gameweeks the user got fancy (didn't pick Salah as captain)
    """
    timesGotFancy: Int!

    """
    Worst gameweek
    """
    worstGameweek: Int!

    """
    Score difference in the worst gameweek
    """
    worstGameweekScore: Int!

    """
    Line items used to calculate the total point difference
    """
    lines: [FancyResultLine]!
}

type FancyResultLine {
    """
    The gameweek the user played
    """
    gameweek: Int!

    """
    Whether the user got fancy
    """
    gotFancy: Boolean!

    """
    The point difference between the user's captain and Salah
    """
    pointDifference: Int!

    """
    Whether the user had Salah in their team
    """
    hadSalah: Boolean!

    """
    The user's captain ID
    """
    captainId: ID!

    """
    The user's captain
    """
    captain: PremierLeaguePlayer

    """
    The points the user's captain scored
    """
    captainGameSummary: FantasyPlayerGameSummary

    """
    The points Salah scored
    """
    salahGameSummary: FantasyPlayerGameSummary
}

type FantasyPlayerGameSummary {
    gameweek: Int!
    points: Int!
    opposingTeamId: ID!
    opposingTeam: PremierLeagueTeam
    wasHome: Boolean!
    homeTeamScore: Int!
    awayTeamScore: Int!
    minutes: Int!
    goals: Int!
    assists: Int!
    cleanSheets: Int!
    conceded: Int!
    ownGoals: Int!
    penaltiesSaved: Int!
    penaltiesMissed: Int!
    yellowCards: Int!
    redCards: Int!
    saves: Int!
    bonus: Int!
}

type FantasyTeam {
    id: ID!
    name: String!
    manager: FantasyManager!
    leagues: [FantasyLeague]!
}

type FantasyManager {
    name: String!
}

type FantasyLeague {
    id: ID!
    name: String!
    standings: [FantasyLeagueStanding]
}

type FantasyLeagueStanding {
    teamId: ID!
    team: FantasyTeam
    rank: Int!
}

type PremierLeagueTeam {
    id: ID!
    """
    The team's full name
    """
    name: String!
    """
    The team's short name
    """
    shortName: String!
    """
    The team's position in the league
    """
    position: Int!

    """
    The team's players
    """
    players: [PremierLeaguePlayer]

    """
    The team's shirts
    """
    shirts: PremierLeagueTeamShirts!
}

type PremierLeaguePlayer {
    id: ID!
    """
    The player's first name
    """
    firstName: String!

    """
    The player's last name
    """
    lastName: String!

    """
    The players display name
    """
    displayName: String!

    """
    The total points the player has scored
    """
    totalPoints: Int!

    """
    The number of goals the player has scored
    """
    goals: Int!

    """
    The id of the players team
    """
    teamId: ID!

    """
    The player's team
    """
    team: PremierLeagueTeam

    """
    The player's position
    """
    position: PremierLeaguePlayerPosition
}

type PremierLeagueTeamShirts {
    homeImageSrc: String!
}

enum PremierLeaguePlayerPosition {
    GOALKEEPER,
    DEFENDER,
    MIDFIELDER,
    FORWARD,
    MANAGER
}